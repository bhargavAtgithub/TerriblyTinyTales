{"version":3,"sources":["logo.svg","components/Row/Row.component.jsx","components/Col/Col.component.jsx","components/SubTitle/SubTitle.component.jsx","components/Title/Title.component.jsx","components/TextBox/TextBox.component.jsx","components/Container/Container.component.jsx","components/CustomButton/CustomButton.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Row","children","className","Col","SubTitle","subTitle","Title","title","TextBox","ip","handleChange","readOnly","rows","cols","placeholder","Container","CustomButton","icon","buttonTitle","handleClick","onClick","App","useState","algo","setAlgo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sKAAAA,EAAOC,QAAU,IAA0B,kC,sOCQ5BC,G,kBAJH,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACb,OAAO,yBAAKC,UAAU,OAAOD,KCGhBE,G,MAJH,SAAC,GAAkB,IAAhBF,EAAe,EAAfA,SACb,OAAO,yBAAKC,UAAU,OAAOD,KCGhBG,G,YAJE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OAAO,0BAAMH,UAAU,YAAYG,KCStBC,EARD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,yBAAKL,UAAU,SACb,wBAAIA,UAAU,eAAeK,KCSpBC,G,MAdC,SAAC,GAA2C,EAAzCC,GAAyC,EAArCC,aAAsC,IAAD,IAAvBC,gBAAuB,SAC1D,OACE,yBAAKT,UAAU,WACb,8BACEA,UAAU,WACVU,KAAK,KACLC,KAAK,KACLC,YAAY,wBACZH,SAAUA,OCJHI,G,MAJG,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SACnB,OAAO,yBAAKC,UAAU,aAAaD,KCQtBe,G,MATM,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YACzC,OACE,4BAAQjB,UAAU,gBAAgBkB,QAASD,GACxCF,GAAQ,0BAAMf,UAAU,kBAAkBe,GAC3C,0BAAMf,UAAU,eAAegB,MCuCtBG,MApCf,WAAgB,IAAD,EACWC,mBAAS,WADpB,mBACNC,EADM,KACAC,EADA,KAWb,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOK,MAAM,qBACb,kBAAC,EAAD,CAAUF,SAAS,uBAGvB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,CACEY,KAAK,WACLC,YAAaK,EACbJ,YAvBW,WAEfK,EADU,WAARD,EACM,UAEA,cAqBN,kBAAC,EAAD,KACE,kBAAC,EAAD,CAASZ,UAAU,QC5BTc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a4b65113.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nimport \"./Row.styles.scss\";\r\n\r\nconst Row = ({ children }) => {\r\n  return <div className=\"row\">{children}</div>;\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\n\r\nimport \"./Col.styles.scss\";\r\n\r\nconst Col = ({ children }) => {\r\n  return <div className=\"col\">{children}</div>;\r\n};\r\n\r\nexport default Col;\r\n","import React from \"react\";\r\n\r\nimport \"./SubTitle.styles.scss\";\r\n\r\nconst SubTitle = ({ subTitle }) => {\r\n  return <span className=\"subTitle\">{subTitle}</span>;\r\n};\r\n\r\nexport default SubTitle;\r\n","import React from \"react\";\r\n\r\nimport \"./Title.styles.scss\";\r\n\r\nimport SubTitle from \"../SubTitle/SubTitle.component\";\r\n\r\nconst Title = ({ title }) => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1 className=\"titleHeader\">{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nimport \"./TextBox.styles.scss\";\r\n\r\nconst TextBox = ({ ip, handleChange, readOnly = false }) => {\r\n  return (\r\n    <div className=\"textBox\">\r\n      <textarea\r\n        className=\"textArea\"\r\n        rows=\"20\"\r\n        cols=\"50\"\r\n        placeholder=\"Enter the string here\"\r\n        readOnly={readOnly}\r\n      ></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextBox;\r\n"," import React from \"react\";\r\n\r\nimport \"./Container.styles.scss\";\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\nimport \"./CustomButton.styles.scss\";\r\n\r\nconst CustomButton = ({ icon, buttonTitle, handleClick }) => {\r\n  return (\r\n    <button className=\"custom-button\" onClick={handleClick}>\r\n      {icon && <span className=\"material-icons\">{icon}</span>}\r\n      <span className=\"buttonTitle\">{buttonTitle}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Row from \"./components/Row/Row.component\";\nimport Col from \"./components/Col/Col.component\";\nimport Title from \"./components/Title/Title.component\";\nimport TextBox from \"./components/TextBox/TextBox.component\";\nimport SubTitle from \"./components/SubTitle/SubTitle.component\";\nimport Container from \"./components/Container/Container.component\";\nimport CustomButton from \"./components/CustomButton/CustomButton.component\";\nfunction App() {\n  const [algo, setAlgo] = useState(\"ENCRYPT\");\n\n  const handleAlgo = () => {\n    if (algo == \"ENCRYPT\") {\n      setAlgo(\"DECRYPT\");\n    } else {\n      setAlgo(\"ENCRYPT\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col>\n          <Title title=\"String Shortener\" />\n          <SubTitle subTitle=\"A TTT assignment\" />\n        </Col>\n      </Row>\n      <Row>\n        <Container>\n          <TextBox />\n        </Container>\n        <CustomButton\n          icon=\"sync_alt\"\n          buttonTitle={algo}\n          handleClick={handleAlgo}\n        />\n        <Container>\n          <TextBox readOnly={true} />\n        </Container>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}